-- Declara√ß√£o dos modulos
module Main where

import System.IO

import Util
import Tipos
import Peca
import Tabuleiro
import Ludo

ajuda :: IO()
ajuda = do
    cls
    putStrLn "\n------------------------------------------------------------------------- Como Jogar ------------------------------------------------------------------------\n"
    putStrLn "üéØ Objetivo do jogo
Percorrer todo o trajeto do tabuleiro no sentido horario com todas as pe√ßas e ser o primeiro jogador a levar seus quatro pe√µes ao ponto de chegada da sua cor.


üìå Regras
Pode ser jogado por um player e um bot baseado em heur√≠stica e aleatoriedade.

O tabuleiro quadrado tem um percurso em forma de cruz e cada jogador tem quatro pe√µes.

Os pe√µes de cada jogador come√ßam na base de mesma cor.

Para se iniciar a partida, joga-se o dado e o participante que fizer o maior n√∫mero de pontos (6) inicia o jogo retirando uma pe√ßa da base.

Quando o jogador j√° tem pelo menos um pe√£o no percurso, joga-se um dado e os avan√ßos s√£o feitos de acordo com os pontos obtidos com o lan√ßamento do dado. Se tirar 6, al√©m de usar esse resultado ele pode jogar novamente o dado.

Para transportar um pe√£o de sua base para seu ponto de partida √© necess√°rio tirar (6).

Se um jogador chegar a uma casa j√° ocupada por um pe√£o advers√°rio, o pe√£o advers√°rio deve voltar para sua base.

Mas se 2 pe√µes da mesma cor ocuparem uma mesma casa, eles n√£o podem ser capturados e nenhum advers√°rio pode passar por essa casa, tendo seus pe√µes bloqueados.

Ap√≥s dar a volta no tabuleiro o pe√£o avan√ßa pela reta final, de sua pr√≥pria cor. A chegada ao ponto final s√≥ pode ser obtida por um n√∫mero exato nos dados. Se o jogador tirar mais do que o necess√°rio, ele vai at√© o fim e volta, tendo que aguardar sua pr√≥xima jogada.

‚úÖ Outras Funcionalidades:
O jogo ter√° um sistema de salvamento;
Ter√° obst√°culos pelo caminho como uma casa que retrocede duas casas;
\n"
    putStrLn $ setColorGreen "Pressione <Enter> para voltar\n"
    getChar -- descarta o enter
    main

creditos :: IO()
creditos = do
    cls
    putStrLn "\n------------------------------------------------------------------------- Desenvolvedores ------------------------------------------------------------------------\n"
    putStrLn $ setColorCiano "Felipe Oliveira"
    putStrLn $ setColorCiano "Lucas Lima"
    putStrLn $ setColorCiano "Pedro Manoel"
    putStrLn $ setColorCiano "Vin√≠cius Lins"
    putStrLn $ setColorGreen "\nPressione <Enter> para voltar\n"
    getChar -- descarta o enter
    main

sair :: IO()
sair = do
    putStrLn $ setColorCiano "\nObrigado por jogar\n"

executaOpcaoMain :: Opcao -> IO()
executaOpcaoMain op
    | op == "1" = do 
        iniciarMenuLudo
        main
    | op == "2" = ajuda
    | op == "3" = creditos
    | op == "4" = sair
    | otherwise = do 
        putStrLn toStringOpcaoInvalida   
        getChar -- descarta o enter
        main

main :: IO ()
main = do
    cls
    putStrLn $ setColorRed ludoLogo
    putStrLn $ setColorCiano "(1)" ++ " Jogar"
    putStrLn $ setColorCiano "(2)" ++ " Ajuda"
    putStrLn $ setColorCiano "(3)" ++ " Creditos"
    putStrLn $ setColorCiano "(4)" ++ " Sair"
    putStrLn toStringOpcao
    op <- getLine
    executaOpcaoMain op
    
    return ()


